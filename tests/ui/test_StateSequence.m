try
    purge
end


[cDirThis, cName, cExt] = fileparts(mfilename('fullpath'));
cDirMic = fullfile(cDirThis, '..', 'src');
addpath(genpath(cDirMic));


clock = mic.Clock('Master');

uiA = mic.ui.device.GetSetNumber('clock', clock, 'cName', 'A', 'cLabel', 'A');
uiB = mic.ui.device.GetSetNumber('clock', clock, 'cName', 'B', 'cLabel', 'B', 'lShowLabels', false);
uiC = mic.ui.device.GetSetNumber('clock', clock, 'cName', 'C', 'cLabel', 'C', 'lShowLabels', false);
uiD = mic.ui.device.GetSetNumber('clock', clock, 'cName', 'D', 'cLabel', 'D', 'lShowLabels', false);


% Create a list of three states

%{
states = {...
    mic.StateFromUiGetSetNumber(uiA, 5, 0.1, uiA.getUnit().name), ...
    mic.StateFromUiGetSetNumber(uiB, 100, 0.1, uiB.getUnit().name) ...
    mic.StateFromUiGetSetNumber(uiC, 20, 0.1, uiC.getUnit().name) ...
};
%}


% Alternatively (DOES NOT WORK, can't get lambda working in Static


states = {...
    mic.State.fromUiGetSetNumber(uiA, 5, 0.1, uiA.getUnit().name), ...
    mic.State.fromUiGetSetNumber(uiB, 100, 0.1, uiB.getUnit().name) ...
    mic.State.fromUiGetSetNumber(uiC, 20, 0.1, uiC.getUnit().name) ...
};



% This sequence is itself a "state" since it implements mic.interface.State
% Uses mic.Scan under the hood to implement go()
state = mic.StateSequence(...
    'clock', clock, ...
    'ceStates', states, ...
    'dPeriod', 0.5, ...
    'cName', 'ABC at 5,100,20' ...
);


% state.go();


state2 = mic.StateSequence(...
    'clock', clock, ...
    'ceStates', {...
        mic.State.fromUiGetSetNumber(uiD, 30, 0.1, uiD.getUnit().name), ...
        state ...
    }, ...
    'dPeriod', 0.5, ...
    'fhGetMessageThere', '', ...
    'cName', 'ABCD at 5,100,20,20' ...
);

state3 = mic.StateSequence(...
    'clock', clock, ...
    'ceStates', {...
        mic.State.fromUiGetSetNumber(uiA, 1, 0.1, uiA.getUnit().name), ...
        mic.State.fromUiGetSetNumber(uiB, 50, 0.1, uiB.getUnit().name) ...
        mic.State.fromUiGetSetNumber(uiC, 10, 0.1, uiC.getUnit().name) ...
    }, ...
    'dPeriod', 0.5, ...
    'cName', 'ABC at 1,50,10' ...
);


h = figure;
uiA.build(h, 10, 10);
uiB.build(h, 10, 55);
uiC.build(h, 10, 85);
uiD.build(h, 10, 115);

%{
uiButtonABC = mic.ui.common.ActiveButton(...
    'clock', clock, ...
    'cName', 'state-abc-test', ...
    'fhOnClick', @() state.go(), ...
    'fhGetColor', @() state.getColor(), ...
    'fhGetText', @() state.getMessage() ...
);


uiButtonABCD = mic.ui.common.ActiveButton(...
    'clock', clock, ...
    'cName', 'state-abcd-test', ...
    'fhOnClick', @() state2.go(), ...
    'fhGetColor', @() state2.getColor(), ...
    'fhGetText', @() state2.getMessage() ...
);

uiButtonABC.build(h, 10, 250, 200, 30);
uiButtonABCD.build(h, 10, 280, 200, 30);
%}

uiStateSequenceABC = mic.ui.StateSequence(...
    'cName', 'ui-state-sequence-ABC', ...
    'state', state, ...
    'clock', clock ...
);

uiStateSequenceABC2 = mic.ui.StateSequence(...
    'cName', 'ui-state-sequence-ABC3', ...
    'state', state3, ...
    'clock', clock ...
);

uiStateSequenceABCD = mic.ui.StateSequence(...
    'cName', 'ui-state-sequence-ABCD', ...
    'state', state2, ...
    'clock', clock ...
);

uiStateSequenceABC.build(h, 10, 150, 200);
uiStateSequenceABCD.build(h, 10, 175, 200);
uiStateSequenceABC2.build(h, 10, 200, 200);
